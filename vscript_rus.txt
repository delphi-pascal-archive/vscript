ПРЕИМУЩЕСТВА ЯЗЫКА
- не надо конвертировать из другого типа то есть если переменная целое число никто не мешает вывести её в сообщении

пример на delphi

	var i:Byte;
	
	i	:=	124;
	ShowMessage(IntToStr(i)); //для вывода сообщения надо конвертировать в строку
	
	
пример на VS

	$i	=	124;
	Message($i);

ПО УМОЛЧАНИЮ ЗАВЕРШИТЬ ПРОГРАММУ ИЗ СКРИПТА НЕЛЬЗЯ! ДЛЯ ИЗМЕНЕНИЯ ПАРАМЕТРА НАЙДИ allow_halt=false


КЛАСС TCOMP //создается при выполнении строк кода
type TComp=record   //Class for language
   __statement:array[0..255]of boolean;//условия выполнения вложений
   __level:Byte;//уровень вложения
   __cycle:Byte;//??
   __comments:boolean;//коментарий??
   __var_ident:array[0..255]of string;//название переменной
   __var_value:array[0..255]of array[0..255]of string;//значение переменной
   __var_count:byte;//количество переменных
   __error:boolean;//номер охибки
   __result:byte;//результат (последний результат функции)
   __code:TStrings;//здесь код скрипта
   __current_code_line:Cardinal;//текущая строка скрипта (только для if,while)
   __switch_level:Byte;//??
   __func_ident:array[0..255]of string;//название функции и её заголовок
   __func_body :array[0..255]of string;//функции
   __func_count:byte;//количество функции
   __return:string;//возвращает результат работы функции
   __halt:boolean;
end;


ГРАНИЦЫ СКРИПТОВ
- максимальное число вложений функций if,for,while,..  256
- максимальное количество переменных 256
- максимальное количество функций 256
- максимальное количество таймеров 256
- максимальное количество callback функций 256
- максимальное значение массива 256 [0..255]

НЕДОСТАТКИ
- долгая работа скрипта
  неоптимизированные 5000 строчек кода выполняются медлено по сравнению с delphi или vb (оно и понятно=) )
- нет функций для работы с дробными числами (зачем? )) )



ЗАМЕЧАНИЯ ПО ЯЗЫКУ

первые функции имеют больший приоритет
то есть:
	func some_func($int) {return 123;}
	func some_func($string) {return "string";}

при вызове some_func() вернет 123 так как она первее
--


все функции должны заканчиваться скобками. то есть если функции не нужны параметры, 
все равно завершайте её пустыми скобками func1();
--


все функции должны заканчиваться точкой с запятой. 
стандартное правило для языков программирования
--


параметры всех операторов (for,while,if,switch) должны быть заключены в скобки
for($i,1,10) {/*выполняется 10 раз*/ some_func();}

while(false) {/*бесконечный цикл*/ some_func();}

if(1==1) {/*всегда выполняется*/ some_func();}

switch($1){
	1:{func1();}
	2:{func2();}
}

данная особенность устранена, теперь можно if 1==1 {message();}
--

для скрепления двух строк используйте (.)

"mama love " . "mamba" . " so do I"
"mama love mamba so do I"
--

для написания пути к файлу используйте двойной слеш \
"C:\\boot.ini"
--

все функции подразумевают результат
return 0;
старайтесь для каждой функции использовать return;



Принцип работы

СТАРТ
1. скрипт загружается в переменную типа TStrings
2. если вверху есть инструкции #include, загружаем их
3. удаляются все коментарии // и /* */
4. скрипт выстраивается в одну строку, а потом разбивается на отдельные строки (каждый оператор - перевод строки)
пример: 
		if(1==1){alert();}
будет
		if(1==1)
		{
		alert();
		}
	
5. загружает все функции и создает заголовки для быстрого запуска
6. поиск функции main и её запуск, если такой функции нет скрипт будет выполняться последовательно (кроме функций)

РАЗБОР ОПЕРАТОРОВ
1. определяет количество скобок (число открытых=числу закрытых)
2. считает количество подфункций ( func1(func2(func3())) )
3. начинает выполнять с последней функции (func3)
4. после успешного результата заменяет функцию на этот результат
	например предположим что func3 возвращает строку "text"
	тогда после выполнения функции строка станет: func1(func2("text"))
5. повторяет до тех пор пока не будут выполнены все функции







